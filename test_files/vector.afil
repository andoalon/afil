struct<T> vector
{
	T mut[] data = null;
	uint64 size = uint64(0);
	uint64 capacity = uint64(0);
	
	constructor default = default;
	
	constructor with_capacity(uint64 capacity)
	{
		if (capacity == uint64(0))
			return vector<T>();
		
		let block = malloc_allocate(capacity * uint64(size_in_bytes_of(T)), uint64(alignment_of(T)));
		return vector<T>(
			.data = T mut[](block.memory),
			.capacity = block.size / uint64(size_in_bytes_of(T))
		);
	}
	
	destructor(vector<T> mut & this)
	{
		if (this.data != null)
		{
			let n = int32(this.size);
			for (let mut i = 0; i < n; i = i + 1)
				destroy(this.data[i]);
			
			malloc_deallocate(byte mut[](this.data), uint64(size_in_bytes_of(T)), uint64(alignment_of(T)));
		}
	}
}
